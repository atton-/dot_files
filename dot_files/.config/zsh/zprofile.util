export LOOP_EXEC_MAX_COUNT=50
export CAREFUL_SYNC_OPTS='--exclude=".*"'

# {{{ careful_sync

function loop_exec() {
    function _loop_exec() {
        if [ $2 -gt $LOOP_EXEC_MAX_COUNT ]; then
            echo "loop_exec reached MAX_COUNT(${LOOP_EXEC_MAX_COUNT}). exit."
            return 1
        fi

        eval "$1"

        if [ $? -ne 0 ]; then
            echo "[$2]: Exit code != 0. execute command again."
            _loop_exec "$1" $(expr $2 + 1)
        fi
    }

    if [ $# -ne 1 ]; then
        echo 'Please specify only a command.'
        echo 'If command has arguments or options, Please quote it.'
        echo "Example: $ loop_exec 'exec_command --option'"
        return 1
    fi

    _loop_exec "$1" 1
    unfunction _loop_exec
}

function careful_sync {
    if [ $# -lt 2 -o $# -gt 3 ]; then
        echo 'Usage : careful_sync <rsync-additional-opts> <source-dir> <destination-dir>'
        return 1
    fi

    if [ $# -eq 2 ]; then
        local rsync_opts=''
        local source=$1
        local destination=$2
    elif [ $# -eq 3 ]; then
        local rsync_opts=$1
        local source=$2
        local destination=$3
    fi


    loop_exec "rsync -avx  ${CAREFUL_SYNC_OPTS} ${rsync_opts} '${source}' '${destination}'"

    if [ $? -ne 0 ]; then
        echo 'Failed synchronization without checksum validation. Validation skipped.'
        return 1
    fi
    loop_exec "rsync -acvx ${CAREFUL_SYNC_OPTS} ${rsync_opts} '${source}' '${destination}'"
}

# }}}

# {{{ compress_directory using rar

function compress_directory() {
    rar a -r -rr5 $1.rar $1
}

function archive_directory() {
    find . -name '*.db' -print0 | xargs -0 rm
    find . -name '.*'   -print0 | xargs -0 rm
    find . -name '_*'   -print0 | xargs -0 rm
    find . -type d -print0      | xargs -0 rmdir

    mkdir /tmp/original_files
    local dir
    for dir in *; do
        compress_directory "$dir" && mv "$dir" /tmp/original_files
    done
}

function rearchive_directory() {
    mkdir /tmp/original_archives
    local file
    for file in *; do
        unar -d "$file" && mv "$file" /tmp/original_archives
        local dirname="${file%.*}"
        mv "${dirname}"/**/*.* "${dirname}"
    done
    archive_directory
}

# }}}

# {{{ git-privatize

function git-privatize() {
    if [ ! -d .git ]; then
        echo '.git not found.'
        echo 'Please execute in repository-root directory.'
        return 1
    fi

    echo-and-eval 'rm -rf /tmp/git-stash-hooks'
    echo-and-eval 'mkdir -p /tmp/git-stash-hooks'
    echo-and-eval 'mv .git/hooks/* /tmp/git-stash-hooks'
    echo-and-eval 'echo "#!/bin/sh" > .git/hooks/pre-push'
    echo-and-eval 'echo "exit 1"   >> .git/hooks/pre-push'
    echo-and-eval 'chmod 755 .git/hooks/pre-push'
}

# }}}

# {{{ pip3-install

function pip3-install() {
    pip3 install --no-color --progress-bar off --upgrade $1
    pip3 check $1
}

# }}}

# {{{ skk-cleanup-regexp

function skk-cleanup-regexp() {
    echo "^[0-9a-z\u3042-\u3093\u30fc]*\\ \\/[0-9a-z\u3042-\u3093\u30fc\u3001]*\\/$"
}

# }}}

# vim: set filetype=zsh:
