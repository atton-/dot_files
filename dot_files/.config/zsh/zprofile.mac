export CP_HOME_DIR=$HOME/.config/cocoapods
export HOMEBREW_NO_AUTO_UPDATE=1

source /usr/local/share/zsh/*

alias docker-volumes-cleanup='docker volume ls -q | egrep "[0-9a-f]{64}" | xargs docker volume rm'
alias notification-banner-clear='terminal-notifier -remove ALL'
alias work='tmuxinator work'

alias dsnow='pmset displaysleepnow'
alias snow='pmset sleepnow'

# {{{ alpine

function alpine() {
    local alpine_running=`docker ps -q --filter 'name=alpine'`

    if [ -z $alpine_running ]; then
        docker run --rm -it --name alpine alpine:latest
    else
        docker run --rm -it alpine:latest
    fi
}

# }}}

# {{{ check-holiday

function check-holiday() {
    ruby -e 'require "holiday_jp"; HolidayJp.holiday?(Date.today) ? puts("Today is holiday") : ""'
}

# }}}

# {{{ delete-text-replacement-informations

function delete-text-replacement-informations() {
    echo 'delete from ZTEXTREPLACEMENTENTRY;' | sqlite3 ~/Library/KeyboardServices/TextReplacements.db
    defaults delete -g NSUserDictionaryReplacementItems
}

# }}}

# {{{ itunes
# http://hints.macworld.com/article.php?story=20011108211802830

function itunes {
    function showHelp() {
        echo '+-------------------------------+';
        echo '| iTunes Command Line Interface |';
        echo '+-------------------------------+';
        echo 'Usage: itunes <command>';
        echo;
        echo 'Commands(default = status)';
        echo ' status, st     = Shows status, current track and volume.';
        echo ' #              = Set volume level to #(0-100)%';
        echo ' play (bgm|fav) = Play (bgm|fav) playlist.';
        echo ' toggle, t      = Toggle play/pause. If iTunes stopped, start it.';
        echo ' next, n        = Go to the next track.';
        echo ' prev, p        = Go to the previous track.';
        echo ' quit, q        = Quit iTunes.';
    }

    function getState() { osascript -e 'tell application "iTunes" to player state as string' }
    function showState() { echo "iTunes is currently `getState`." }
    function showStatus() { showState; showCurrentVolume; showTrackInfo; }

    function showTrackInfo() {
        if [ `getState` != 'stopped' ]; then
            local track=`osascript -e 'tell application "iTunes" to name of current track as string'`;
            local album=`osascript -e 'tell application "iTunes" to album of current track as string'`;
            echo "Current track: $track - ($album)";
        fi
    }

    function showCurrentVolume() {
        local vol=`osascript -e 'tell application "iTunes" to sound volume as integer'`;
        echo "Current volume level: $vol%";
    }

    function play() {
        echo 'Playing iTunes.';
        osascript -e 'tell application "iTunes" to play';
        showTrackInfo;
    }

    function playlist() {
        echo "Playing playlist '$1'."
        osascript -e "tell application \"iTunes\" to play playlist \"$1\" ";
        showTrackInfo;
    }

    if [ $# = 0 ]; then showStatus; fi

    while [ $# -gt 0 ]; do
        local arg=$1;
        case $arg in
            'status' | 'st' )
                showStatus;
                break ;;

            'play' )
                if [ $# -eq 1 ]; then
                    echo 'Please input name of playlist: bgm or fav'
                    break ;
                fi

                local name=$2
                if [ $name = 'bgm' ]; then
                    playlist 'BGM : for Work'
                elif [ $name = 'fav' ]; then
                    playlist 'Song : Recently Favorited'
                else
                    echo "$name is not supported."
                    echo 'Currently supported playlist: bgm or fav'
                    break ;
                fi
                break ;;

            'toggle' | 't' )
                local state=`getState`
                if [ $state = 'playing' ]; then
                    echo 'Pausing iTunes.';
                    osascript -e 'tell application "iTunes" to pause';
                elif [ $state = 'paused' ]; then
                    play;
                elif [ $state = 'stopped' ]; then
                    echo 'iTunes currently stopped. starting iTunes.'
                    play;
                fi
                break ;;

            'next' | 'n' )
                echo 'Going to next track.' ;
                osascript -e 'tell application "iTunes" to next track';
                showTrackInfo;
                break ;;

            'prev' | 'p' )
                echo 'Going to previous track.';
                osascript -e 'tell application "iTunes" to previous track';
                showTrackInfo;
                break ;;

            'quit' | 'q' )
                echo 'Quitting iTunes.';
                osascript -e 'tell application "iTunes" to quit';
                break ;;

            <0-100> )
                echo "Changing iTunes volume level: ${1}%";
                osascript -e "tell application \"iTunes\" to set sound volume to ${1}";
                break ;;

            'help' | * )
                showHelp;
                break ;;
        esac
    done

    unfunction getState showState showStatus play playlist
    unfunction showCurrentVolume showHelp showTrackInfo
}

# }}}

# {{{ kindle-free-books

function kindle-free-books() {
    open -a safari 'https://www.amazon.co.jp/s/ref=sr_st_price-asc-rank?rh=n%3A2250738051%2Cp_36%3A0-11000&qid=1524613417&tag=atton-22&sort=price-asc-rank'
}

# }}}

# {{{ pbcopy-keychain

function pbcopy-keychain() {
    if [ $# -ne 1 ]; then
        echo 'Please specify an item name.'
        return 1
    fi

    security 2>&1 >/dev/null find-generic-password -gs $1 | \
    ruby -e 'print $1 if STDIN.gets =~ /^password: "(.*)"$/' | pbcopy
}

# }}}

# {{{ peep-mac

function peep-mac {
    if [ $# -ne 1 ]; then
        echo 'Please specify PID'
        return 1
    fi

    echo "Target command: $(ps | grep -e "^[[:space:]]*$1")"
    echo-and-eval "peep $1 >& /dev/null && terminal-notifier -sound Glass -message 'Peeping process(PID: $1) was finished'"
}

# }}}

# {{{ peep-mac-tmux

function peep-mac-tmux() {
    local pane_count=$(tmux list-panes | wc -l)

    if [ $pane_count -ne 2 ]; then
        echo 'peep-mac-tmux function only works 2 panel. Exit.'
        exit 1
    fi

    local target_parent_pid=$(tmux list-panes -F '#{pane_active} #{pane_pid}' | egrep '^0' | awk '{print $2}')
    local target_pid=$(ps aux -o ppid | grep $target_parent_pid | grep -v grep | awk '{print $2}' | sort -r | head -1)

    peep-mac $target_pid
}

# }}}

# {{{ url4tweet

function url4tweet {
    if [ $# -ne 1 ]; then
        echo 'Please specify URL'
        return 1
    fi

    # needs GNU grep
    local title=$(curl -s ${1} | /usr/local/opt/grep/libexec/gnubin/grep -oP "(?<=<title>)(.+)(?=</title>)")
    echo "${title} ${1}"
}

# }}}

# vim: set filetype=zsh:
