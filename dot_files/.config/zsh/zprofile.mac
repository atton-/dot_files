export CP_HOME_DIR=$HOME/.config/cocoapods
export HOMEBREW_NO_AUTO_UPDATE=1
export RUBY_CONFIGURE_OPTS="--enable-shared --with-openssl-dir=/usr/local/opt/openssl@1.1"
# "brew --prefix openssl@1.1" is heavy. So set "--with-openssl-dir" directly. (More info: $ brew info ruby-build)

alias dsnow='pmset displaysleepnow'
alias notification-banner-clear='terminal-notifier -remove ALL'
alias work='tmuxinator work'

alias alpine='docker-run-sandbox alpine'
alias alpine-ruby='docker-run-sandbox ruby:2.5.7-alpine sh'
alias alpine-ruby-latest='docker-run-sandbox ruby:2.7.0-alpine sh'
alias centos='docker-run-sandbox centos'
alias docker-hypervisor='docker run -it --rm --privileged --pid=host alpine'
alias docker-volumes-cleanup='docker volume ls -q | egrep "[0-9a-f]{64}" | xargs docker volume rm'

alias hubb='hub browse'
alias hubc='hub ci-status -v'
alias hubo='hub ci-status -v | egrep -o "https?://[^ ]+" | xargs open -a safari'

# {{{ check-holiday

function check-holiday() {
    ruby -e 'require "holiday_jp"; HolidayJp.holiday?(Date.today) ? puts("Today is holiday") : ""'
}

# }}}

# {{{ delete-text-replacement-informations

function delete-text-replacement-informations() {
    echo 'delete from ZTEXTREPLACEMENTENTRY;' | sqlite3 ~/Library/KeyboardServices/TextReplacements.db
    defaults delete -g NSUserDictionaryReplacementItems
}

# }}}

# {{{ docker-run-sandbox

function docker-run-sandbox() {
    local name=`echo $1 | sed -e 's/:.*$//'`
    local target_running=`docker ps -q --filter "name=${name}"`

    if [ -z $target_running ]; then
        docker run --rm -it --name ${name} ${1} ${2}
    else
        docker run --rm -it ${1} ${2}
    fi
}

# }}}

# {{{ itunes
# http://hints.macworld.com/article.php?story=20011108211802830

function itunes {
    function showHelp() {
        echo '--- Command Line iTunes Control ---';
        echo ' itunes     = Shows status, current track and volume.';
        echo ' itunes #   = Set volume level to #(0-100) percent';
        echo ' itunes bgm = Play "BGM : for Work" playlist.';
        echo ' itunes fav = Play "Song : Recently Favorited" playlist.';
        echo ' itunes t   = Toggle play/pause. If iTunes stopped, start it.';
        echo ' itunes n   = Go to the next track.';
        echo ' itunes p   = Go to the previous track.';
        echo ' itunes h   = show help informations.';
    }

    function getState()   { osascript -e 'tell application "iTunes" to player state as string' }
    function showState()  { echo "iTunes is currently `getState`." }
    function showStatus() { showState; showCurrentVolume; showTrackInfo; }

    function showTrackInfo() {
        if [ `getState` != 'stopped' ]; then
            local track=`osascript -e 'tell application "iTunes" to name of current track as string'`;
            local album=`osascript -e 'tell application "iTunes" to album of current track as string'`;
            echo "Current track: $track - ($album)";
        fi
    }

    function showCurrentVolume() {
        local vol=`osascript -e 'tell application "iTunes" to sound volume as integer'`;
        echo "Current volume level: $vol%";
    }

    function play() {
        echo 'Playing iTunes.';
        osascript -e "tell application \"iTunes\" to play $1";
        showTrackInfo;
    }

    function toggle() {
        local state=`getState`
        if [ $state = 'playing' ]; then
            echo 'Pausing iTunes.';
            osascript -e 'tell application "iTunes" to pause';
        elif [ $state = 'paused' ]; then
            play;
        elif [ $state = 'stopped' ]; then
            echo 'iTunes currently stopped. starting iTunes.'
            play;
        fi
    }

    function next() {
        echo 'Going to next track.' ;
        osascript -e 'tell application "iTunes" to next track';
        showTrackInfo;
    }

    function previous() {
        echo 'Going to previous track.';
        osascript -e 'tell application "iTunes" to previous track';
        showTrackInfo;
    }

    function volume() {
        echo "Changing iTunes volume level: ${1}%";
        osascript -e "tell application \"iTunes\" to set sound volume to ${1}";
    }

    function cleanup() {
        unfunction getState showState showStatus play toggle next previous
        unfunction volume showCurrentVolume showHelp showTrackInfo cleanup
    }

    # itunes main code
    if [ $# = 0 ]; then showStatus; cleanup; return; fi
    case $1 in
        'bgm'    ) play 'playlist "BGM : for Work"' ;;
        'fav'    ) play 'playlist "Song : Recently Favorited"' ;;
        't'      ) toggle ;;
        'n'      ) next ;;
        'p'      ) previous ;;
         <0-100> ) volume $1 ;;
         *       ) showHelp ;;
    esac
    cleanup
}

# }}}

# {{{ pbcopy-keychain

function pbcopy-keychain() {
    test $# -ne 1 && echo 'Please specify an item name.' && return 1
    security find-generic-password -s $1 >& /dev/null
    test $? -ne 0 && echo "Specified key($1) is not found."   && return 1

    security 2>&1 >/dev/null find-generic-password -ws $1 | pbcopy
}

# }}}

# {{{ peep-mac

function peep-mac {
    if [ $# -ne 1 ]; then
        echo 'Please specify PID'
        return 1
    fi

    echo "Target command: $(ps | grep -e "^[[:space:]]*$1")"
    echo-and-eval "peep $1 >& /dev/null && terminal-notifier -sound Glass -message 'Peeping process(PID: $1) was finished'"
}

# }}}

# {{{ peep-mac-tmux

function peep-mac-tmux() {
    local pane_count=$(tmux list-panes | wc -l)

    if [ $pane_count -ne 2 ]; then
        echo 'peep-mac-tmux function only works 2 panel. Exit.'
        exit 1
    fi

    local target_parent_pid=$(tmux list-panes -F '#{pane_active} #{pane_pid}' | egrep '^0' | awk '{print $2}')
    local target_pid=$(ps aux -o ppid | grep $target_parent_pid | grep -v grep | awk '{print $2}' | sort -r | head -1)

    peep-mac $target_pid
}

# }}}

# {{{ title-from-url

function title-from-url {
    if [ $# -ne 1 ]; then echo 'Please specify the URL' 1>&2; return 1; fi
    if egrep -v '^https?://.+' <<< $1 >& /dev/null; then echo "'$1' is not URL" 1>&2; return 1; fi
    local title=`curl -sL $1 | sed -e 's/<title[^>]*>/<title>/' | ggrep -oP "(?<=<title>)(.+)(?=</title>)" | head -1`

    if [ -n "${title}" ]; then
        echo $title
    else
        echo 'GET_TITLE_FAILRUED'
        return 1
    fi
}

# }}}

# {{{ tweet-url-format

function tweet-url-format {
    local title=`title-from-url $@`
    if [ -n "$title" ]; then echo "${title} ${1}"; fi
}

# }}}

# {{{ url4md

function url4md {
    local title=`title-from-url $@`
    if [ -n "$title" ]; then echo "[${title}](${1})"; fi
}

# }}}

# vim: set filetype=zsh:
