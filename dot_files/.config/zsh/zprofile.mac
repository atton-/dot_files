export CP_HOME_DIR=$HOME/.config/cocoapods
export HOMEBREW_NO_AUTO_UPDATE=1

source /usr/local/share/zsh/*

alias docker-volumes-cleanup='docker volume ls -q | egrep "[0-9a-f]{64}" | xargs docker volume rm'
alias hub-ci='date +"%Y/%m/%d %H:%M:%S" && hub ci-status -v'
alias hub-ci-open='hub ci-status -v | egrep -o "https?://[^ ]+" | xargs open -a safari'
alias notification-banner-clear='terminal-notifier -remove ALL'
alias work='tmuxinator work'

alias dsnow='pmset displaysleepnow'
alias snow='pmset sleepnow'

# {{{ alpine

function alpine() {
    local alpine_running=`docker ps -q --filter 'name=alpine'`

    if [ -z $alpine_running ]; then
        docker run --rm -it --name alpine alpine:latest
    else
        docker run --rm -it alpine:latest
    fi
}

# }}}

# {{{ check-holiday

function check-holiday() {
    ruby -e 'require "holiday_jp"; HolidayJp.holiday?(Date.today) ? puts("Today is holiday") : ""'
}

# }}}

# {{{ delete-text-replacement-informations

function delete-text-replacement-informations() {
    echo 'delete from ZTEXTREPLACEMENTENTRY;' | sqlite3 ~/Library/KeyboardServices/TextReplacements.db
    defaults delete -g NSUserDictionaryReplacementItems
}

# }}}

# {{{ itunes
# http://hints.macworld.com/article.php?story=20011108211802830

function itunes {
    function showHelp() {
        echo '+-------------------------------+';
        echo '| iTunes Command Line Interface |';
        echo '+-------------------------------+';
        echo 'Usage: itunes <command>';
        echo;
        echo 'Commands(default = status)';
        echo ' status, st = Shows status, current track and volume.';
        echo ' #          = Set volume level to #(0-100)%';
        echo ' bgm        = Play "BGM : for Work" playlist.';
        echo ' fav        = Play "Song : Recently Favorited" playlist.';
        echo ' toggle, t  = Toggle play/pause. If iTunes stopped, start it.';
        echo ' next, n    = Go to the next track.';
        echo ' prev, p    = Go to the previous track.';
        echo ' quit, q    = Quit iTunes.';
        echo ' help, *    = show help informations.';
    }

    function getState()   { osascript -e 'tell application "iTunes" to player state as string' }
    function showState()  { echo "iTunes is currently `getState`." }
    function showStatus() { showState; showCurrentVolume; showTrackInfo; }

    function showTrackInfo() {
        if [ `getState` != 'stopped' ]; then
            local track=`osascript -e 'tell application "iTunes" to name of current track as string'`;
            local album=`osascript -e 'tell application "iTunes" to album of current track as string'`;
            echo "Current track: $track - ($album)";
        fi
    }

    function showCurrentVolume() {
        local vol=`osascript -e 'tell application "iTunes" to sound volume as integer'`;
        echo "Current volume level: $vol%";
    }

    function play() {
        echo 'Playing iTunes.';
        osascript -e 'tell application "iTunes" to play';
        showTrackInfo;
    }

    function playlist() {
        echo "Playing playlist '$1'."
        osascript -e "tell application \"iTunes\" to play playlist \"$1\" ";
        showTrackInfo;
    }

    function toggle() {
        if [ $1 = 'playing' ]; then
            echo 'Pausing iTunes.';
            osascript -e 'tell application "iTunes" to pause';
        elif [ $1 = 'paused' ]; then
            play;
        elif [ $1 = 'stopped' ]; then
            echo 'iTunes currently stopped. starting iTunes.'
            play;
        fi
    }

    function next() {
        echo 'Going to next track.' ;
        osascript -e 'tell application "iTunes" to next track';
        showTrackInfo;
    }

    function previous() {
        echo 'Going to previous track.';
        osascript -e 'tell application "iTunes" to previous track';
        showTrackInfo;
    }

    function quit() {
        echo 'Quitting iTunes.';
        osascript -e 'tell application "iTunes" to quit';
    }

    function volume() {
        echo "Changing iTunes volume level: ${1}%";
        osascript -e "tell application \"iTunes\" to set sound volume to ${1}";
    }

    function cleanup() {
        unfunction getState showState showStatus play playlist toggle next previous
        unfunction quit volume showCurrentVolume showHelp showTrackInfo cleanup
    }

    # itunes main code
    if [ $# = 0 ]; then showStatus; cleanup; return; fi
    case $1 in
        'status' | 'st' ) showStatus;;
        'bgm'           ) playlist 'BGM : for Work' ;;
        'fav'           ) playlist 'Song : Recently Favorited' ;;
        'toggle' | 't'  ) toggle `getState` ;;
        'next'   | 'n'  ) next ;;
        'prev'   | 'p'  ) previous ;;
        'quit'   | 'q'  ) quit ;;
         <0-100>        ) volume $1 ;;
        'help'   | *    ) showHelp ;;
    esac
    cleanup
}

# }}}

# {{{ kindle-free-books

function kindle-free-books() {
    open -a safari 'https://www.amazon.co.jp/s/ref=sr_st_price-asc-rank?rh=n%3A2250738051%2Cp_36%3A0-11000&qid=1524613417&tag=atton-22&sort=price-asc-rank'
}

# }}}

# {{{ pbcopy-keychain

function pbcopy-keychain() {
    if [ $# -ne 1 ]; then
        echo 'Please specify an item name.'
        return 1
    fi

    security 2>&1 >/dev/null find-generic-password -gs $1 | \
    ruby -e 'print $1 if STDIN.gets =~ /^password: "(.*)"$/' | pbcopy
}

# }}}

# {{{ peep-mac

function peep-mac {
    if [ $# -ne 1 ]; then
        echo 'Please specify PID'
        return 1
    fi

    echo "Target command: $(ps | grep -e "^[[:space:]]*$1")"
    echo-and-eval "peep $1 >& /dev/null && terminal-notifier -sound Glass -message 'Peeping process(PID: $1) was finished'"
}

# }}}

# {{{ peep-mac-tmux

function peep-mac-tmux() {
    local pane_count=$(tmux list-panes | wc -l)

    if [ $pane_count -ne 2 ]; then
        echo 'peep-mac-tmux function only works 2 panel. Exit.'
        exit 1
    fi

    local target_parent_pid=$(tmux list-panes -F '#{pane_active} #{pane_pid}' | egrep '^0' | awk '{print $2}')
    local target_pid=$(ps aux -o ppid | grep $target_parent_pid | grep -v grep | awk '{print $2}' | sort -r | head -1)

    peep-mac $target_pid
}

# }}}

# {{{ title-from-url

function title-from-url {
    if [ $# -ne 1 ]; then echo 'Please specify the URL' 1>&2; return 1; fi
    if egrep -v '^https?://.+' <<< $1 >& /dev/null; then echo "'$1' is not URL" 1>&2; return 1; fi
    curl -sL $1 | sed -e 's/<title[^>]*>/<title>/' | ggrep -oP "(?<=<title>)(.+)(?=</title>)" | head -1
}

# }}}

# {{{ url4md

function url4md {
    local title=`title-from-url $@`
    if [ -n "$title" ]; then echo "[${title}](${1})"; fi
}

# }}}

# vim: set filetype=zsh:
