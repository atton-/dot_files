export HOMEBREW_NO_AUTO_UPDATE=1

source /usr/local/share/zsh/*

alias wine='LC_ALL=ja_JP.UTF-8 wine'
alias work='tmuxinator work'
alias notification-banner-clear='terminal-notifier -remove ALL'


# {{{ call-subshell

function call-subshell () {
    echo $BUFFER | /usr/bin/egrep "(\&\&|\||\|\&)" >& /dev/null
    if [ $? -eq 0 ]; then
        echo $BUFFER | /usr/bin/egrep "^[[:space:]]*\(" | /usr/bin/egrep "\)[[:space:]]*$" >& /dev/null
        if [ $? -ne 0 ]; then
            BUFFER="( ${BUFFER} )"
        fi
    fi
    zle .accept-line
}
zle -N accept-line call-subshell

# }}}

# {{{ delete-text-replacement-informations

function delete-text-replacement-informations() {
    echo 'delete from ZTEXTREPLACEMENTENTRY;' | sqlite3 ~/Library/KeyboardServices/TextReplacements.db
    defaults delete -g NSUserDictionaryReplacementItems
}

# }}}

# {{{ peep-mac

function peep-mac {
    if [ $# -ne 1 ]; then
        echo 'Please specify PID'
        return 1
    fi

    echo "Target command: $(ps | grep -e "^[[:space:]]*$1")"
    echo_and_eval "peep >& /dev/null $1 && terminal-notifier -sound Glass -message 'Peeping process was finished.'"
}

# }}}

# {{{ peep-mac-tmux

function peep-mac-tmux() {
    pane_count=$(tmux list-panes | wc -l)

    if [ $pane_count -ne 2 ]; then
        echo 'peep-mac-tmux function only works 2 panel. Exit.'
        exit 1
    fi

    target_parent_pid=$(tmux list-panes -F '#{pane_active} #{pane_pid}' | egrep '^0' | awk '{print $2}')
    target_pid=$(ps aux -o ppid | grep $target_parent_pid | grep -v grep | awk '{print $2}' | sort -r | head -1)

    peep-mac $target_pid
}

# }}}

# {{{ url4tweet

function url4tweet {
    if [ $# -ne 1 ]; then
        echo 'Please specify URL'
        return 1
    fi

    # needs GNU grep
    title=$(curl -s ${1} | /usr/local/opt/grep/libexec/gnubin/grep -oP "(?<=<title>)(.+)(?=</title>)")
    echo "${title} ${1}"
}

# }}}

# {{{ build-tmp-slide

function build-tmp-slide {
    if [ $# -ne 2 ]; then
        echo "Usage: build-tmp-slide <src_path> <src_name_without_modifier>"
        echo "Note: this script usually called by quickrun"
        return 1
    fi

    work_dir='/tmp/slideshow'
    rm -rf ${work_dir}
    mkdir -p ${work_dir}

    src_filename="$1.md"
    slideshow build ${src_filename} -o ${work_dir} -t shower

    if [[  $(uname) == Darwin ]]; then
        slide_path="${work_dir}/$2.html"
        open $slide_path
    fi
}

# }}}

# {{{ itunes
# http://hints.macworld.com/article.php?story=20011108211802830

function itunes {
    function showHelp () {
        echo '-----------------------------';
        echo 'iTunes Command Line Interface';
        echo '-----------------------------';
        echo 'Usage: itunes <option>';
        echo;
        echo 'Options:';
        echo ' status, st = Shows iTunes status, current track and volume.';
        echo ' play       = Start playing iTunes.';
        echo ' pause      = Pause iTunes.';
        echo ' next, n    = Go to the next track.';
        echo ' prev, p    = Go to the previous track.';
        echo ' mute       = Mute iTunes volume.';
        echo ' unmute     = Unmute iTunes volume.';
        echo ' vol up     = Increase iTunes volume by 10%';
        echo ' vol down   = Increase iTunes volume by 10%';
        echo ' vol #      = Set iTunes volume to # [0-100]';
        echo ' quit       = Quit iTunes.';
    }

    if [ $# = 0 ]; then
        showHelp;
    fi

    while [ $# -gt 0 ]; do
        arg=$1;
        case $arg in
            'status' | 'st' )
                state=`osascript -e 'tell application "iTunes" to player state as string'`;
                echo "iTunes is currently $state.";
                if [ $state = "playing" ]; then
                    track=`osascript -e 'tell application "iTunes" to name of current track as string'`;
                    album=`osascript -e 'tell application "iTunes" to album of current track as string'`;
                    vol=`osascript -e 'tell application "iTunes" to sound volume as integer'`;
                    echo "Current track: $track - ($album)";
                    echo "Current volume: $vol";
                fi
                break ;;

            'play' )
                echo 'Playing iTunes.';
                osascript -e 'tell application "iTunes" to play';
                break ;;

            'pause' )
                echo 'Pausing iTunes.';
                osascript -e 'tell application "iTunes" to pause';
                break ;;

            'next' | 'n' )
                echo 'Going to next track.' ;
                osascript -e 'tell application "iTunes" to next track';
                break ;;

            'prev' | 'p' )
                echo 'Going to previous track.';
                osascript -e 'tell application "iTunes" to previous track';
                break ;;

            'mute' )
                echo 'Muting iTunes volume level.';
                osascript -e 'tell application "iTunes" to set mute to true';
                break ;;

            'unmute' )
                echo 'Unmuting iTunes volume level.';
                osascript -e 'tell application "iTunes" to set mute to false';
                break ;;

            'vol'    )
                if [ $# -eq 1 ]; then
                    echo 'Plese vol with "up" or "down" or 0-100.'
                    break ;
                fi

                vol=`osascript -e 'tell application "iTunes" to sound volume as integer'`;
                if [ $2 = "up" ]; then
                    newvol=$(( vol+10 ));
                elif [ $2 = "down" ]; then
                    newvol=$(( vol-10 ));
                elif [ $2 -gt 0 ]; then
                    newvol=$2;
                fi
                echo "Changing iTunes volume level: $newvol";
                osascript -e "tell application \"iTunes\" to set sound volume to $newvol";
                break ;;

            'quit' )
                echo 'Quitting iTunes.';
                osascript -e 'tell application "iTunes" to quit';
                exit 1 ;;

            'help' | * )
                echo 'help:';
                showHelp;
                break ;;
        esac
    done
}

# }}}

# vim: set filetype=zsh:
