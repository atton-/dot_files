export HOMEBREW_NO_AUTO_UPDATE=1

source /usr/local/share/zsh/*

alias notification-banner-clear='terminal-notifier -remove ALL'
alias work='tmuxinator work'

alias dsnow='pmset displaysleepnow'
alias snow='pmset sleepnow'

# {{{ alpine

function alpine() {
    alpine_running=`docker ps -q --filter 'name=alpine'`

    if [ -z $alpine_running ]; then
        docker run --rm -it --name alpine alpine:latest
    else
        docker run --rm -it alpine:latest
    fi
}

# }}}

# {{{ delete-text-replacement-informations

function delete-text-replacement-informations() {
    echo 'delete from ZTEXTREPLACEMENTENTRY;' | sqlite3 ~/Library/KeyboardServices/TextReplacements.db
    defaults delete -g NSUserDictionaryReplacementItems
}

# }}}

# {{{ peep-mac

function peep-mac {
    if [ $# -ne 1 ]; then
        echo 'Please specify PID'
        return 1
    fi

    echo "Target command: $(ps | grep -e "^[[:space:]]*$1")"
    echo_and_eval "peep >& /dev/null $1 && terminal-notifier -sound Glass -message 'Peeping process was finished.'"
}

# }}}

# {{{ peep-mac-tmux

function peep-mac-tmux() {
    pane_count=$(tmux list-panes | wc -l)

    if [ $pane_count -ne 2 ]; then
        echo 'peep-mac-tmux function only works 2 panel. Exit.'
        exit 1
    fi

    target_parent_pid=$(tmux list-panes -F '#{pane_active} #{pane_pid}' | egrep '^0' | awk '{print $2}')
    target_pid=$(ps aux -o ppid | grep $target_parent_pid | grep -v grep | awk '{print $2}' | sort -r | head -1)

    peep-mac $target_pid
}

# }}}

# {{{ url4tweet

function url4tweet {
    if [ $# -ne 1 ]; then
        echo 'Please specify URL'
        return 1
    fi

    # needs GNU grep
    title=$(curl -s ${1} | /usr/local/opt/grep/libexec/gnubin/grep -oP "(?<=<title>)(.+)(?=</title>)")
    echo "${title} ${1}"
}

# }}}

# {{{ build-tmp-slide

function build-tmp-slide {
    if [ $# -ne 2 ]; then
        echo "Usage: build-tmp-slide <src_path> <src_name_without_modifier>"
        echo "Note: this script usually called by quickrun"
        return 1
    fi

    work_dir='/tmp/slideshow'
    rm -rf ${work_dir}
    mkdir -p ${work_dir}

    src_filename="$1.md"
    slideshow build ${src_filename} -o ${work_dir} -t shower

    if [[  $(uname) == Darwin ]]; then
        slide_path="${work_dir}/$2.html"
        open $slide_path
    fi
}

# }}}

# {{{ itunes
# http://hints.macworld.com/article.php?story=20011108211802830

function itunes {
    function showHelp () {
        echo '-----------------------------';
        echo 'iTunes Command Line Interface';
        echo '-----------------------------';
        echo 'Usage: itunes <option>';
        echo;
        echo 'Options:';
        echo ' status, st = Shows iTunes status, current track and volume.';
        echo ' play       = Start playing iTunes.';
        echo ' pause      = Pause iTunes.';
        echo ' toggle, t  = Toggle play/pause.';
        echo ' next, n    = Go to the next track.';
        echo ' prev, p    = Go to the previous track.';
        echo ' vol #      = Set iTunes volume to # [0-100]';
        echo ' quit       = Quit iTunes.';
    }

    function getState() {
        osascript -e 'tell application "iTunes" to player state as string'
    }

    function showTrackInfo() {
        if [ `getState` != 'stopped' ]; then
            track=`osascript -e 'tell application "iTunes" to name of current track as string'`;
            album=`osascript -e 'tell application "iTunes" to album of current track as string'`;
            echo "Current track: $track - ($album)";
        fi
    }

    function showCurrentVolume() {
        vol=`osascript -e 'tell application "iTunes" to sound volume as integer'`;
        echo "Current volume: $vol";
    }

    function pause() {
        echo 'Pausing iTunes.';
        osascript -e 'tell application "iTunes" to pause';
    }

    function play() {
        echo 'Playing iTunes.';
        osascript -e 'tell application "iTunes" to play';
    }

    if [ $# = 0 ]; then
        showHelp;
    fi

    while [ $# -gt 0 ]; do
        arg=$1;
        case $arg in
            'status' | 'st' )
                state=`getState`
                echo "iTunes is currently $state.";
                showCurrentVolume;
                showTrackInfo;
                break ;;

            'play' )
                play;
                break ;;

            'pause' )
                pause;
                break ;;

            'toggle' | 't' )
                state=`getState`
                if [ $state = 'playing' ]; then
                    pause;
                elif [ $state = 'paused' ]; then
                    play;
                fi
                break ;;

            'next' | 'n' )
                echo 'Going to next track.' ;
                osascript -e 'tell application "iTunes" to next track';
                showTrackInfo;
                break ;;

            'prev' | 'p' )
                echo 'Going to previous track.';
                osascript -e 'tell application "iTunes" to previous track';
                showTrackInfo;
                break ;;

            'vol' )
                if [ $# -eq 1 ]; then
                    showCurrentVolume;
                    echo 'Plaese specify volume level: 0-100.'
                    break ;
                fi

                newvol=$2;
                if [ $newvol -gt 100 ]; then
                    showCurrentVolume;
                    echo 'Specified volume over 100. abort.'
                    break ;
                fi

                echo "Changing iTunes volume level: $newvol";
                osascript -e "tell application \"iTunes\" to set sound volume to $newvol";
                break ;;

            'quit' )
                echo 'Quitting iTunes.';
                osascript -e 'tell application "iTunes" to quit';
                break ;;

            'help' | * )
                echo 'help:';
                showHelp;
                break ;;
        esac
    done
}

# }}}

# {{{ check-holiday

function check-holiday() {
    ruby -e 'require "holiday_jp"; HolidayJp.holiday?(Date.today) ? puts("Today is holiday") : ""'
}

# }}}

# vim: set filetype=zsh:
