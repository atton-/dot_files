name: Brew bundle and Verify init scripts

on: [push, pull_request]

# https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources

jobs:
  homebrew:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Remove pre-installed pod command
      run: rm '/usr/local/bin/pod'
    - name: Install formulas by homebrew + bundle
      run: |
        brew update
        brew tap homebrew/bundle
        brew bundle
    - name: Check installed packages
      run: cat Brewfile.lock.json
  ruby-alpine:
    runs-on: ubuntu-latest
    container: docker://alpine
    steps:
      - uses: actions/checkout@v2
      - name: Setup dependencies by apk
        run: apk add ruby ruby-dev make gcc libc-dev bash
      - name: Execute ruby-init.sh
        run: bash scripts/ruby-init.sh
  ruby-centos:
    runs-on: ubuntu-latest
    container: docker://centos
    steps:
      - uses: actions/checkout@v2
      - name: Setup dependencies by dnf
        run: dnf install -y which ruby ruby-devel make gcc redhat-rpm-config
      - name: Execute ruby-init.sh
        run: bash scripts/ruby-init.sh
  python-alpine:
    runs-on: ubuntu-latest
    container: docker://alpine
    steps:
      - uses: actions/checkout@v2
      - name: Setup dependencies by apk
        run: apk add python3 python3-dev gcc libc-dev bash
      - name: Execute python-init.sh
        run: bash scripts/python-init.sh
  python-centos:
    runs-on: ubuntu-latest
    container: docker://centos
    steps:
      - uses: actions/checkout@v2
      - name: Setup dependencies by dnf
        run: dnf install -y gcc python3 python3-devel which
      - name: Execute python-init.sh
        run: bash scripts/python-init.sh
  node-alpine:
    runs-on: ubuntu-latest
    container: docker://alpine
    steps:
      - uses: actions/checkout@v2
      - name: Setup dependencies by apk
        run: apk add npm bash
      - name: Execute install.sh
        run: bash install.sh
      - name: Execute node-init.sh
        run: bash scripts/node-init.sh
  node-centos:
    runs-on: ubuntu-latest
    container: docker://centos
    steps:
      - uses: actions/checkout@v2
      - name: Setup dependencies by dnf
        run: dnf install -y which npm
      - name: Execute install.sh
        run: bash install.sh
      - name: Execute node-init.sh
        run: bash scripts/node-init.sh
  neovim-alpine:
    runs-on: ubuntu-latest
    container: docker://alpine
    steps:
      - uses: actions/checkout@v2
      - name: Setup dependencies by apk
        run: apk add --no-progress bash curl gcc git libc-dev make neovim nodejs npm python3 python3-dev ruby ruby-dev
      - name: Execute scripts
        run: |
          bash install.sh
          bash scripts/ruby-init.sh
          bash scripts/node-init.sh
      - name: Execute neovim-init.sh
        run: bash scripts/neovim-init.sh
  neovim-centos:
    runs-on: ubuntu-latest
    container: docker://centos
    steps:
      - name: Setup dependencies by dnf
        run: dnf install -y automake cmake gcc gcc-c++ gettext git libtool make python3 unzip which
      - name: clone neovim from github
        run: git clone https://github.com/neovim/neovim /root/neovim
      - name: Install latest neovim
        run: |
          pushd /root/neovim
          NEOVIM_LATEST_VERSION=$(git tag | sort -V | tail -1)
          echo $NEOVIM_LATEST_VERSION
          git checkout -b $NEOVIM_LATEST_VERSION
          make install
          popd
      - uses: actions/checkout@v2
      - name: Execute install.sh
        run: bash install.sh
      - name: Execute neovim-init.sh
        run: bash scripts/neovim-init.sh
  neovim-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install neovim by homebrew
        run: |
          brew update
          brew install neovim
      - name: Setup dependencies by homebrew
        run: brew install rbenv nodenv
      - name: Execute install.sh and copy config under dot_files/.config
        run: |
          bash install.sh
          cp -r dot_files/.config/* $HOME/.config
      - name: Install ruby and execute ruby-init.sh
        run: |
          RUBY_LATEST_VERSION=$(rbenv install -l | egrep '^[0-9.]+$' | sort -V | tail -1)
          echo $RUBY_LATEST_VERSION
          rbenv install $RUBY_LATEST_VERSION
          rbenv global $RUBY_LATEST_VERSION
          zsh -l scripts/ruby-init.sh
      - name: Install node and execute node-init.sh
        run: |
          NODE_LATEST_VERSION=$(nodenv install -l | egrep '^[0-9.]+$' | sort -V | tail -1)
          echo $NODE_LATEST_VERSION
          nodenv install $NODE_LATEST_VERSION
          nodenv global $NODE_LATEST_VERSION
          zsh -l scripts/node-init.sh
      - name: Execute neovim-init.sh(include python-init.sh)
        run:  zsh -l scripts/neovim-init.sh
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cleanup pre-installed docker images
        run: docker images -aq | xargs docker rmi
      - name: Execute docker-init.sh
        run: bash scripts/docker-init.sh
      - name: Check images
        run: |
          docker images | grep alpine
          docker images | grep centos
