" plugins settings
" management plugin : neobundle

" neobundle Settings {{{
filetype off                    
" neobundle initialize {{{
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))
" }}}

" set use plugins

" plugin management
NeoBundle 'Shougo/neobundle.vim'

" neocomplcache
NeoBundle 'Shougo/neocomplcache.git'
NeoBundle 'Shougo/neocomplcache-snippets-complete'
NeoBundle 'ujihisa/neco-ruby'
NeoBundle 'ujihisa/neco-ghc'
NeoBundle 'neco-look'

" quickrun and watchdogs
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'osyo-manga/shabadou.vim'
NeoBundle 'osyo-manga/vim-watchdogs'

" extension
NeoBundle 'Shougo/vimshell.git'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'thinca/vim-ref'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'tyru/eskk.vim'
NeoBundle 'gregsexton/VimCalc'

" syntax
NeoBundle 'tpope/vim-rails'
NeoBundle 'dag/vim2hs'

" utility
NeoBundle 'h1mesuke/vim-alignta'
NeoBundle 'tpope/vim-surround'
NeoBundle 'taku-o/vim-toggle'
NeoBundle 'matchit.zip'


" auto make vimproc
NeoBundle 'Shougo/vimproc', {
            \ 'build' : {
            \     'windows' : 'echo "Sorry, cannot update vimproc binary file in Windows."',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ }

" lazy load plugins
NeoBundleLazy 'yuratomo/w3m.vim'
NeoBundleLazy 'Shougo/vinarise'
NeoBundleLazy 'taka84u9/vim-ref-ri'
NeoBundleLazy 'ujihisa/ref-hoogle'

" for debug
NeoBundleLazy 'thinca/vim-prettyprint'

" check not installed plugin {{{
if neobundle#exists_not_installed_bundles()
    echomsg 'Not installed bundles : ' .
                \ string(neobundle#get_not_installed_bundle_names())
    echomsg 'Please execute ":NeoBundleInstall" command.'
    "finish
endif
" }}}
" }}}

" plugins settings {{{


" neocomplcache
let g:neocomplcache_enable_at_startup = 1                   " 起動時に有効化
let g:neocomplcache_enable_underbar_completion = 1          " _の補完を有効化
let g:neocomplcache_temporary_dir = expand('~/.vim/.neocon')

" neocomplcacheのスニペットを <C-k> にマッピング
imap <C-k> <Plug>(neocomplcache_snippets_expand)
smap <C-k> <Plug>(neocomplcache_snippets_expand)

" i_^x^gでneocomplcacheを起動
inoremap <expr><c-x><c-g> neocomplcache#start_manual_complete()


" vimshell
let g:vimshell_interactive_update_time = 10
let g:vimshell_prompt = '% '
let g:vimshell_user_prompt = ''
let g:vimshell_right_prompt = 'getcwd()'
let g:vimshell_temporary_directory = expand('~/.vim/.vimshell')

augroup vimshell
    autocmd!
    autocmd FileType vimshell setlocal nonumber
augroup END
" command for shortcut
command! Vsh VimShellTab


" Unite
let g:unite_update_time = 10
let g:unite_data_directory = expand('~/.vim/.unite')
command! Ub Unite buffer
command! Uf Unite file
command! Ur Unite register
command! Um Unite file_mru
command! Ug Unite grep
command! Uo Unite outline
command! Uc Unite menu:commands
" commands source. for command shortcut {{{
 
" command map
let s:commands = {}
function s:commands.map(key, value)
    return { 'word': a:key, 'kind': 'command', 'action__command': a:value}
endfunction

" commands
let s:commands.candidates = {
\ 'NeoBundleUpdate': 'NeoBundleUpdate',
\ 'NeoBundleSource': 'NeoBundleSource',
\ 'ReloadVimrc'    : 'ReloadVimrc',
\ 'EditVimrc'      : 'EditVimrc',
\ }

" add unite
let g:unite_source_menu_menus = {'commands': deepcopy(s:commands)}

unlet s:commands
" }}}


" quickrun
" ショートカット
nmap <C-k> <Plug>(quickrun)
" デフォルト設定
let g:quickrun_config = {'_' : {}}
" 起動時は縦分割
let g:quickrun_config._['split'] = ''
" vimproc updatetime
let g:quickrun_config._['runner'] = 'vimproc'
let g:quickrun_config._['runner/vimproc/updatetime'] = 50
" scheme を quickrun  (for SICP)
let g:quickrun_config.scheme = {'command' : 'gosh' , 'cmdopt' : '-i' , 'exec' : '%c %o < %s'}


" watchdogs
" デフォルト設定
let s:watchdogs_config = {}
" quickfix にデータがある場合に quickfix ウィンドウを開く
let s:watchdogs_config['hook/copen/enable_exist_data'] = 0
" 保存してないファイルにはバッファ番号で対応
let s:watchdogs_config['hook/quickfix_replate_tempname_to_bufnr/enable_exit'] = 1
let s:watchdogs_config['hook/quickfix_replate_tempname_to_bufnr/priority_exit'] = -10

" 追加
let g:quickrun_config['watchdogs_checker/_']  = s:watchdogs_config
unlet s:watchdogs_config
" initialize
call watchdogs#setup(g:quickrun_config)
" shortcut
nnoremap <C-j> :WatchdogsRun<CR>


" VimCalc
let g:VCalc_WindowPosition = 'bottom'                       "ウィンドウは下に起動


" eskk.vim
let g:eskk#directory  = expand('~/.vim/eskk')               " direcotry
let g:eskk#dictionary = { 'path': expand('~/.vim/eskk/skk-jisyo'), 'sorted': 0, 'encoding': 'utf-8' }       " dictionary
let g:eskk#large_dictionary = { 'path': expand('~/.vim/eskk/SKK-JISYO.L'), 'sorted': 1, 'encoding': 'euc-jp', }
imap <C-J> <Plug>(eskk:enable)
cmap <C-J> <Plug>(eskk:enable)
lmap <C-J> <Plug>(eskk:enable)

" vim-ref
let g:ref_cache_dir = expand('~/.vim/.vim_ref_cache')

" webdict
augroup ref
" FileTypeがtextならKでwebdictを使う
    autocmd!
    autocmd FileType text call ref#register_detection('_', 'webdict') 
augroup END
" yahoo_dict と infoseek と wikipedia を使う
let g:ref_source_webdict_sites = {
\ 'yahoo_dict'  : {'url' : 'http://dic.search.yahoo.co.jp/search?p=%s',  'line' : '47'},
\ 'infoseek_je' : {'url' : 'http://dictionary.infoseek.ne.jp/jeword/%s', 'line' : '11'}, 
\ 'infoseek_ej' : {'url' : 'http://dictionary.infoseek.ne.jp/ejword/%s', 'line' : '11'}, 
\ 'wikipedia'   : {'url' : 'http://ja.wikipedia.org/wiki/%s',},}
" webdict の辞書のデフォルトはyahoo_dict
let g:ref_source_webdict_sites.default = 'yahoo_dict'           
" テキストブラウザはw3mを使う
let g:ref_source_webdict_cmd = 'w3m -dump %s'

" refe
let g:ref_refe_cmd = expand(' ~/.vim/ruby_ref/ruby-refm-1.9.3-dynamic-20120829/refe-1_9_3 ')


" gundo.vim
" UでUndoTree
nnoremap U :GundoToggle<CR>


" vim-surround
" manual mapping for eskk.vim (ignore ISurruond)
let g:surround_no_mappings = 1
" diff original mapping : Visual mode surround use 's' (original 'S')
if has('vim_starting')
    nmap ds  <Plug>Dsurround
    nmap cs  <Plug>Csurround
    nmap ys  <Plug>Ysurround
    nmap yS  <Plug>YSurround
    nmap yss <Plug>Yssurround
    nmap ySs <Plug>YSsurround
    nmap ySS <Plug>YSsurround
    xmap s   <Plug>VSurround
    xmap gs  <Plug>VgSurround
endif

" w3m.vim
augroup w3m
    autocmd!    
    " K でrefでwebdict
    autocmd FileType w3m call ref#register_detection('_', 'webdict')
    autocmd FileType w3m set nonumber
augroup END

" }}}
